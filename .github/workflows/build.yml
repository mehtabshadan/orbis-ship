name: Build and Package Next.js Application

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check directory structure
        shell: pwsh
        run: |
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem -Path "." -Recurse -Depth 2 | Select-Object FullName
          
          Write-Host "`nLooking for build scripts:"
          if (Test-Path ".\builder\build-package.ps1") {
            Write-Host "Found: .\builder\build-package.ps1"
          } else {
            Write-Host "Not found: .\builder\build-package.ps1"
            Write-Host "Available files in builder:"
            if (Test-Path ".\builder") {
              Get-ChildItem -Path ".\builder"
            }
          }

      - name: Run deployment packager
        shell: pwsh
        run: |
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          
          $scriptPath = "${{ github.workspace }}\builder\build-package.ps1"
          
          if (Test-Path $scriptPath) {
            Write-Host "Running packager from: $scriptPath"
            & $scriptPath -OutputPath "${{ github.workspace }}\dist" -OpenFolder $false
          } else {
            Write-Host "ERROR: Script not found at $scriptPath"
            Write-Host "Current location: $(Get-Location)"
            Get-ChildItem -Path "${{ github.workspace }}" -Recurse -Depth 2
            exit 1
          }

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: orbis-app-package
          path: dist/
          retention-days: 30

      - name: Create Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.zip
          body_path: RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/
          asset_name: OrbisApp-Release
          asset_content_type: application/zip
