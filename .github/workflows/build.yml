name: Build Next.js Application

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  release:
    types: [created, published]
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  id-token: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Get version from package.json
        id: get_version
        shell: pwsh
        run: |
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          $version = $packageJson.version
          Write-Output "VERSION=$version" >> $env:GITHUB_ENV
          Write-Output "Package version: $version"

      - name: Create build archive
        shell: pwsh
        run: |
          $archiveName = "orbis-${{ env.VERSION }}.zip"
          
          # Create a temporary directory for the package
          $packageDir = "package"
          New-Item -ItemType Directory -Force -Path $packageDir
          
          # Copy only the two essential folders as per build-packager.ps1
          
          # 1. Copy .next/standalone directory (the main application)
          if (Test-Path ".next/standalone") {
            Copy-Item -Path ".next/standalone" -Destination "$packageDir/.next/standalone" -Recurse -Force
            Write-Output "Copied .next/standalone directory"
          }
          
          # 2. Copy public directory (static assets)
          if (Test-Path "public") {
            Copy-Item -Path "public" -Destination "$packageDir/public" -Recurse -Force
            Write-Output "Copied public directory"
          }
          
          # Create ZIP from the package directory
          Compress-Archive -Path "$packageDir/*" -DestinationPath $archiveName -Force
          
          # Clean up
          Remove-Item $packageDir -Recurse -Force
          
          Write-Output "Created build archive: $archiveName with only essential folders"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: orbis-${{ env.VERSION }}
          path: orbis-${{ env.VERSION }}.zip
          retention-days: 30

      - name: Create Release using GitHub CLI
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        shell: pwsh
        run: |
          # Set up GitHub CLI authentication
          $env:GH_TOKEN = "${{ secrets.GITHUB_TOKEN }}"
          
          # Check if release already exists
          $releaseExists = $false
          try {
            gh release view "latest" --repo "${{ github.repository }}" | Out-Null
            $releaseExists = $true
            Write-Output "Release 'latest' already exists, will update it"
          } catch {
            Write-Output "Release 'latest' does not exist, will create it"
          }
          
          if ($releaseExists) {
            # Delete existing release
            gh release delete "latest" --repo "${{ github.repository }}" --yes
            Write-Output "Deleted existing 'latest' release"
          }
          
          # Create new release
          gh release create "latest" "orbis-${{ env.VERSION }}.zip" `
            --repo "${{ github.repository }}" `
            --title "Orbis Ship Latest (v${{ env.VERSION }})" `
            --notes "## Orbis Ship Latest Development Build

          **üîÑ Automatically updated from main branch**
          **Version:** v${{ env.VERSION }}
          **Built from commit:** ${{ github.sha }}
          **Build date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')

          This is the latest development build from the main branch.

          ### üì¶ What's included:
          - Complete Next.js standalone application
          - Public static assets  
          - Ready for deployment on Windows machines

          ### üöÄ Installation:
          1. Download the orbis-${{ env.VERSION }}.zip file
          2. Extract to your desired location
          3. Run the extracted application

          ---
          Built with ‚ù§Ô∏è using GitHub Actions" `
            --prerelease `
            --latest

          Write-Output "Successfully created release 'latest'"

      - name: Create Tagged Release using GitHub CLI  
        if: startsWith(github.ref, 'refs/tags/v')
        shell: pwsh
        run: |
          # Set up GitHub CLI authentication
          $env:GH_TOKEN = "${{ secrets.GITHUB_TOKEN }}"
          
          # Create release for the tag
          gh release create "${{ github.ref_name }}" "orbis-${{ env.VERSION }}.zip" `
            --repo "${{ github.repository }}" `
            --title "Orbis Ship v${{ env.VERSION }}" `
            --notes "## Orbis Ship Release v${{ env.VERSION }}

          **Built from commit:** ${{ github.sha }}
          **Build date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')

          ### üì¶ What's included:
          - Complete Next.js standalone application
          - Public static assets
          - Ready for deployment on Windows machines

          ### üöÄ Installation:
          1. Download the orbis-${{ env.VERSION }}.zip file
          2. Extract to your desired location  
          3. Run the extracted application

          ### üìä Package Info:
          - **Size:** ~18MB
          - **Runtime:** Node.js (standalone, no installation required)
          - **Platform:** Windows

          ---
          Built with ‚ù§Ô∏è using GitHub Actions"

          Write-Output "Successfully created tagged release '${{ github.ref_name }}'"
